<snippet>
	<content><![CDATA[
//I really recommend that you define long as int64_t and ulong as uint64_t

template<ulong m>
struct modint {
	ulong x;

	modint() : x(0) {}
	modint(long long arg) {
		arg %= m;
		x = (arg < 0 ? arg+m : arg);
	}

	modint& operator+= (const modint& other) {
		x += other.x;
		if (x >= m) x -= m;
		return *this;
	}

	modint& operator*= (const modint& other) {
		x = (x * other.x) % m;
		return *this;
	}

	modint& operator-= (const modint& other) {
		x += m - other.x;
		if(x >= m) x -= m;
		return *this;
	}

	modint operator+ (const modint& other) const {
		modint tmp = *this;
		tmp += other;
		return tmp;
	}

	modint operator- (const modint& other) const {
		modint tmp = *this;
		tmp -= other;
		return tmp;
	}

	modint operator* (const modint& other) const {
		modint tmp = *this;
		tmp *= other;
		return tmp;
	}

	explicit operator ulong () const { return x; }
	modint& operator++ () {
		++x;
		if(x == m) x = 0;
		return *this;
	}

	modint& operator-- () {
		if(x == 0) x = m-1;
		else --x;
		return *this;
	}

	modint operator++ (int) {
		modint tmp = *this;
		++*this;
		return tmp;
	}

	modint operator-- (int) {
		modint tmp = *this;
		--*this;
		return tmp;
	}

	bool operator== (const modint& other) const { return x == other.x; }
	bool operator!= (const modint& other) const { return x != other.x; }

	//This is a logarithmic exponentiation function. NOT the XOR operator
	modint operator^ (ulong arg) const {
		if(arg == 0) return 1;
		if (arg == 1) return x;
		auto t = *this ^ (arg >> 1);
		t *= t;
		if (arg & 1) t *= *this;
		return t;
	}

	//Modular Multiplicative Inverse
	modint inv(ulong exp = m - 2) const {
		return *this ^ exp;
	}
};

//Common mod used in contests
const ulong MOD = 1'000'000'007;
typedef modint<MOD> mint;

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>modint</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>

	<description>Modular arithmetic</description>
</snippet>
